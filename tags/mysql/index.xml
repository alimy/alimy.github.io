<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on 北野</title>
    <link>https://alimy.me/tags/mysql/</link>
    <description>Recent content in mysql on 北野</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <lastBuildDate>Sat, 05 Mar 2022 14:10:00 +0800</lastBuildDate><atom:link href="https://alimy.me/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL和PostgreSQL的常用语法差异</title>
      <link>https://alimy.me/post/dev_202203051410/</link>
      <pubDate>Sat, 05 Mar 2022 14:10:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202203051410/</guid>
      <description>&lt;p&gt;MySQL和PostgreSQL的常用语法差异，后续更新中&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 8.0直方图</title>
      <link>https://alimy.me/post/dev_202106300750/</link>
      <pubDate>Wed, 30 Jun 2021 07:50:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202106300750/</guid>
      <description>&lt;h3 id=&#34;0-什么是直方图&#34;&gt;0. 什么是直方图&lt;/h3&gt;
&lt;p&gt;直方图（Histogram）是数据库提供的一种（索引之外的）基础统计信息，用于描述列上的数据分布情况。它最典型的场景是估算查询谓词的选择率，以便选择合适的执行计划。&lt;/p&gt;
&lt;p&gt;也就是说，某个列可以不创建索引但创建直方图，也可以帮助提升查询效率。
MySQL 8.0开始支持直方图，这是个很大的进步。&lt;/p&gt;
&lt;p&gt;直方图可以针对某个列记录其数据分布统计信息，例如有个列的值是从1到1万，那么可以利用直方图分成100个桶（bucket），每个桶中统计这1万个值是怎么分布的，以及每个桶中的最大值、最小值、占比等信息。&lt;/p&gt;
&lt;p&gt;虽然可以利用索引优化SQL效率，但索引维护的代价更高，索引要保持更新，而直方图可以按需手动更新。&lt;/p&gt;
&lt;p&gt;索引统计信息也有不可靠的时候，例如存在数据倾斜，或者统计延迟等问题。&lt;/p&gt;
&lt;p&gt;另外，在有需要的时候，可以在每个有需要的列上创建直方图，但却不太可能同时创建多个单列索引，那样代价太高了。&lt;/p&gt;
&lt;p&gt;例如下面这个执行计划：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@yejr.run]&amp;gt; explain select * from t1 where seq = 1234;
+------+---------------+------+---------+------+--------+----------+-------------+
| type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |
+------+---------------+------+---------+------+--------+----------+-------------+
| ALL  | NULL          | NULL | NULL    | NULL | 299876 |    10.00 | Using where |
+------+---------------+------+---------+------+--------+----------+-------------+

[root@yejr.run]&amp;gt; select * from t1 where seq = 1234;
Empty set (0.097 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在还没创建直方图之前，seq列上同时也没有索引，这时是全表扫描，注意到 filtered 列的值是10%。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>乐观锁和悲观锁的区别</title>
      <link>https://alimy.me/post/dev_202303152242/</link>
      <pubDate>Mon, 15 Mar 2021 22:42:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202303152242/</guid>
      <description>&lt;h3 id=&#34;乐观锁&#34;&gt;乐观锁&lt;/h3&gt;
&lt;p&gt;在关系数据库管理系统里，乐观并发控制（又名乐观锁，Optimistic Concurrency Control，缩写 OCC）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。乐观事务控制最早是由孔祥重（H.T.Kung）教授提出。&lt;/p&gt;
&lt;h3 id=&#34;乐观并发控制的阶段&#34;&gt;乐观并发控制的阶段&lt;/h3&gt;
&lt;p&gt;乐观并发控制的事务包括以下阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取：事务将数据读入缓存，这时系统会给事务分派一个时间戳。&lt;/li&gt;
&lt;li&gt;校验：事务执行完毕后，进行提交。这时同步校验所有事务，如果事务所读取的数据在读取之后又被其他事务修改，则产生冲突，事务被中断回滚。&lt;/li&gt;
&lt;li&gt;写入：通过校验阶段后，将更新的数据写入数据库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;乐观并发控制多数用于数据争用不大、冲突较少的环境中，这种环境中，偶尔回滚事务的成本会低于读取数据时锁定数据的成本，因此可以获得比其他并发控制方法更高的吞吐量。&lt;/p&gt;
&lt;p&gt;相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。&lt;/p&gt;
&lt;p&gt;数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。&lt;/p&gt;
&lt;p&gt;实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。 使用版本号实现乐观锁&lt;/p&gt;
&lt;p&gt;使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
