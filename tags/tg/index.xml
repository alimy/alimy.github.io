<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tg on 北野</title>
    <link>https://alimy.me/tags/tg/</link>
    <description>Recent content in tg on 北野</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <lastBuildDate>Mon, 04 Jan 2021 20:02:00 +0800</lastBuildDate><atom:link href="https://alimy.me/tags/tg/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tg: Serialized binary TL-schema in vkext format(*.tlo)</title>
      <link>https://alimy.me/post/dev_202101042002/</link>
      <pubDate>Mon, 04 Jan 2021 20:02:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202101042002/</guid>
      <description>&lt;pre&gt;&lt;code&gt;---types---
/////
//
// Serialized binary TL-schema in vkext format
//
/////

tls.schema_v2 version:int date:int types_num:# types:types_num*[tls.Type] constructor_num:# constructors:constructor_num*[tls.Combinator] functions_num:# functions:functions_num*[tls.Combinator] = tls.Schema;

tls.type name:int id:string constructors_num:int flags:int arity:int params_type:long = tls.Type;
tls.combinator name:int id:string type_name:int left:tls.CombinatorLeft right:tls.CombinatorRight = tls.Combinator;
tls.combinatorLeftBuiltin = tls.CombinatorLeft;
tls.combinatorLeft args_num:# args:args_num*[tls.Arg] = tls.CombinatorLeft;

tls.combinatorRight value:tls.TypeExpr = tls.CombinatorRight;

tls.arg id:string flags:# var_num:flags.1?int exist_var_num:flags.2?int exist_var_bit:flags.2?int type:tls.TypeExpr = tls.Arg;

tls.exprType _:tls.TypeExpr = tls.Expr;
tls.exprNat _:tls.NatExpr = tls.Expr;

tls.natConst value:int = tls.NatExpr;
tls.natVar dif:int var_num:int = tls.NatExpr;

tls.typeVar var_num:int flags:int = tls.TypeExpr;
tls.array multiplicity:tls.NatExpr args_num:# args:args_num*[tls.Arg] = tls.TypeExpr;
tls.typeExpr name:int flags:int children_num:# children:children_num*[tls.Expr] = tls.TypeExpr;
---functions---
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Tg:TL-formal</title>
      <link>https://alimy.me/post/dev_202012071348/</link>
      <pubDate>Fri, 18 Dec 2020 16:30:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202012071348/</guid>
      <description>&lt;p&gt;See also &lt;a href=&#34;https://core.telegram.org/mtproto/TL&#34;&gt;TL Language&lt;/a&gt;. For the syntax of declaring combinators, see in article &lt;a href=&#34;https://core.telegram.org/mtproto/TL-combinators&#34;&gt;Formal declaration of TL combinators&lt;/a&gt;. For the syntax of patterns, see in article &lt;a href=&#34;https://core.telegram.org/mtproto/TL-patterns&#34;&gt;Formal declaration of TL patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;tokens&#34;&gt;Tokens&lt;/h3&gt;
&lt;p&gt;Comments are the same as in C/C++. They are removed by a lexical parser (for example, being replaced by a single space). Whitespace separates tokens. Except for string constants, tokens cannot contain spaces.&lt;/p&gt;
&lt;p&gt;Character classes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lc-letter ::= `a` | `b` | ... | `z`
uc-letter ::= `A` | `B` | ... | `Z`
digit ::= `0` | `1` | ... | `9`
hex-digit ::= digit | `a` | `b` | `c` | `d` | `e` | `f`
underscore ::= `_`
letter ::= lc-letter | uc-letter
ident-char ::= letter | digit | underscore
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Tg: Current MTProto TL-schema</title>
      <link>https://alimy.me/post/dev_202012081630/</link>
      <pubDate>Mon, 07 Dec 2020 13:48:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202012081630/</guid>
      <description>&lt;p&gt;Below you will find the current MTProto TL-schema. More detais on &lt;a href=&#34;https://alimy.me/post/dev_202012071315/&#34;&gt;TL&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int ? = Int;
long ? = Long;
double ? = Double;
string ? = String;

vector {t:Type} # [ t ] = Vector t;

int128 4*[ int ] = Int128;
int256 8*[ int ] = Int256;

resPQ#05162463 nonce:int128 server_nonce:int128 pq:bytes server_public_key_fingerprints:Vector&amp;lt;long&amp;gt; = ResPQ;

p_q_inner_data#83c95aec pq:bytes p:bytes q:bytes nonce:int128 server_nonce:int128 new_nonce:int256 = P_Q_inner_data;

server_DH_params_fail#79cb045d nonce:int128 server_nonce:int128 new_nonce_hash:int128 = Server_DH_Params;
server_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:bytes = Server_DH_Params;

server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:bytes g_a:bytes server_time:int = Server_DH_inner_data;

client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:bytes = Client_DH_Inner_Data;

dh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;
dh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;
dh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;

rpc_result#f35c6d01 req_msg_id:long result:Object = RpcResult;
rpc_error#2144ca19 error_code:int error_message:string = RpcError;

rpc_answer_unknown#5e2ad36e = RpcDropAnswer;
rpc_answer_dropped_running#cd78e586 = RpcDropAnswer;
rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;

future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
future_salts#ae500895 req_msg_id:long now:int salts:vector&amp;lt;future_salt&amp;gt; = FutureSalts;

pong#347773c5 msg_id:long ping_id:long = Pong;

destroy_session_ok#e22045fc session_id:long = DestroySessionRes;
destroy_session_none#62d350c9 session_id:long = DestroySessionRes;

new_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession;

msg_container#73f1f8dc messages:vector&amp;lt;%Message&amp;gt; = MessageContainer;
message msg_id:long seqno:int bytes:int body:Object = Message;
msg_copy#e06046b2 orig_message:Message = MessageCopy;

gzip_packed#3072cfa1 packed_data:bytes = Object;

msgs_ack#62d6b459 msg_ids:Vector&amp;lt;long&amp;gt; = MsgsAck;

bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification;
bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification;

msg_resend_req#7d861a08 msg_ids:Vector&amp;lt;long&amp;gt; = MsgResendReq;
msgs_state_req#da69fb52 msg_ids:Vector&amp;lt;long&amp;gt; = MsgsStateReq;
msgs_state_info#04deb57d req_msg_id:long info:bytes = MsgsStateInfo;
msgs_all_info#8cc0d131 msg_ids:Vector&amp;lt;long&amp;gt; info:bytes = MsgsAllInfo;
msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
msg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo;

---functions---

req_pq#60469778 nonce:int128 = ResPQ;

req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:bytes q:bytes public_key_fingerprint:long encrypted_data:bytes = Server_DH_Params;

set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:bytes = Set_client_DH_params_answer;

rpc_drop_answer#58e4a740 req_msg_id:long = RpcDropAnswer;
get_future_salts#b921bd04 num:int = FutureSalts;
ping#7abe77ec ping_id:long = Pong;
ping_delay_disconnect#f3427b8c ping_id:long disconnect_delay:int = Pong;
destroy_session#e7512126 session_id:long = DestroySessionRes;

http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Tg: Service Messages</title>
      <link>https://alimy.me/post/dev_202012071337/</link>
      <pubDate>Mon, 07 Dec 2020 13:37:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202012071337/</guid>
      <description>&lt;h4 id=&#34;response-to-an-rpc-query&#34;&gt;Response to an RPC query&lt;/h4&gt;
&lt;p&gt;A response to an RPC query is normally wrapped as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rpc_result#f35c6d01 req_msg_id:long result:Object = RpcResult;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here req_msg_id is the identifier of the message sent by the other party and containing an RPC query. This way, the recipient knows that the result is a response to the specific RPC query in question. At the same time, this response serves as acknowledgment of the other party’s receipt of the req_msg_id message.&lt;/p&gt;
&lt;p&gt;Note that the response to an RPC query must also be acknowledged. Most frequently, this coincides with the transmission of the next message (which may have a container attached to it carrying a service message with the acknowledgment).&lt;/p&gt;
&lt;h4 id=&#34;rpc-error&#34;&gt;RPC Error&lt;/h4&gt;
&lt;p&gt;The result field returned in response to any RPC query may also contain an error message in the following format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rpc_error#2144ca19 error_code:int error_message:string = RpcError;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Tg: Binary Data Serialization</title>
      <link>https://alimy.me/post/dev_202012071333/</link>
      <pubDate>Mon, 07 Dec 2020 13:33:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202012071333/</guid>
      <description>&lt;p&gt;MTProto operation requires that elementary and composite data types as well as queries to which such data types are passed as arguments or by which they are returned, be transmitted in binary format (i. e. serialized) . The &lt;a href=&#34;https://alimy.me/post/dev_202012071315/&#34;&gt;TL language&lt;/a&gt; is used to describe the data types to be serialized.&lt;/p&gt;
&lt;h4 id=&#34;general-definitions&#34;&gt;General Definitions&lt;/h4&gt;
&lt;p&gt;For our purposes, we can identify a type with the set of its (serialized) values understood as strings (finite sequences) of 32-bit numbers (transmitted in little endian order).&lt;/p&gt;
&lt;p&gt;Therefore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alphabet (A), in this case, is a set of 32-bit numbers (normally, signed, i. e. between &lt;code&gt;-2^31&lt;/code&gt; and &lt;code&gt;2^31 - 1)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Value, in this case, is the same as a string in Alphabet A, i. e. a finite (possibly, empty) sequence of 32-bit numbers. The set of all such sequences is designated as A*.&lt;/li&gt;
&lt;li&gt;Type, for our purposes, is the same as the set of legal values of a type, i. e. some set T which is a subset of A* and is a prefix code (i. e. no element of T may be a prefix for any other element). Therefore, any sequence from A* can contain no more than one prefix that is a member of T.&lt;/li&gt;
&lt;li&gt;Value of Type T is any sequence (value) which is a member of T as a subset of A*.&lt;/li&gt;
&lt;li&gt;Compatible Types are the types T and T’ not intersecting as subsets of A*, such that the union of T and T&#39; is a prefix code.&lt;/li&gt;
&lt;li&gt;Coordinated System of Types is a finite or infinite set of types T_1, &amp;hellip;, T_n, &amp;hellip;, such that any two types from this set are compatible.&lt;/li&gt;
&lt;li&gt;Data Type is the same as type in the sense of the definition above.&lt;/li&gt;
&lt;li&gt;Functional Type is a type describing a function; it is not a type in the sense of the definition above. Initially, we ignore the existence of functional types and describe only the data types; however, in reality, functional types will later be implemented in some extension of this system using the so-called temporary combinators.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tg: Type serialization</title>
      <link>https://alimy.me/post/dev_202012071330/</link>
      <pubDate>Mon, 07 Dec 2020 13:30:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202012071330/</guid>
      <description>&lt;p&gt;See &lt;a href=&#34;https://alimy.me/post/dev_202012071321/&#34;&gt;Polymorphism in TL&lt;/a&gt; and &lt;a href=&#34;https://alimy.me/post/dev_202012071315&#34;&gt;TL Language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It remains to describe how types, e.g. values of type Type, are transmitted (serialized). In general, there is nothing unexpected going on here: we have type constructors of various arities (for example, List is an arity-1 constructor, but IntList is a 0-arity constructor); and if we know that a 32-bit “name” is assigned to each type constructor, there are no further questions &amp;ndash; values of type Type are serialized exactly like values of any other recursive type with a defined set of constructors of differing arity.&lt;/p&gt;
&lt;p&gt;How can a 32-bit “name” be assigned to a type (a type constructor, to be more exact) such as List or IntList? It is proposed to use the sum of the names of all of its constructors, plus the CRC32 of the string with the designation of the type&amp;rsquo;s name and all of its parameters such as “IntList = Type” or “List X:Type = Type”. This way, the List constructor’s “name” is the sum of the CRC32s of the three strings &amp;ldquo;List X:Type = Type&amp;rdquo;, &amp;ldquo;cons X:Type hd:X tl:List X = List X&amp;rdquo;, and &amp;ldquo;nil X:Type = List X&amp;rdquo;. For “bare” types (which, formally speaking, are subtypes of the corresponding “boxed” type), the situation is somewhat more complicated; the logical negation of the corresponding constructor’s name is used. For built-in bareand boxed types (for example, int and Int), a pseudo-declaration is used (for example, int ? = Int&amp;quot;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This description is somewhat outdated and may be updated in the future. Specifically, how to treat the ! modifier has not been explained.*&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tg: Polymorphism in TL</title>
      <link>https://alimy.me/post/dev_202012071321/</link>
      <pubDate>Mon, 07 Dec 2020 13:21:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202012071321/</guid>
      <description>&lt;p&gt;It should be noted that in the TL schema of the overwhelming majority of API calls the use of polymorphic types is restricted to the Vector type. Nevertheless, having a view of the big picture is still helpful.&lt;/p&gt;
&lt;h4 id=&#34;ordinary-inductive-types&#34;&gt;Ordinary inductive types&lt;/h4&gt;
&lt;p&gt;For example, let us consider the IntList, which is defined as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int_cons hd:int tl:IntList = IntList;
int_nil = IntList;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The “int_cons” and “int_nil” constructors as well as the “IntList” type itself are expressions of the following types (writing A : X means that A is an expression of type X):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IntList : Type;
int_cons : int -&amp;gt; IntList -&amp;gt; IntList;
int_nil : IntList;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The keyword Type is used to denote the type of all types. Note that Type is not Object (Object is the type of all terms). Here is alternative syntax that could be used in some other functional programming language (but not in TL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NewType IntList :=
| int_cons hd:int tl:IntList
| int_nil
EndType
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Tg: TL Language</title>
      <link>https://alimy.me/post/dev_202012071315/</link>
      <pubDate>Mon, 07 Dec 2020 13:15:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202012071315/</guid>
      <description>&lt;p&gt;TL (Type Language) serves to describe the used system of types, constructors, and existing functions. In fact, the combinator description format presented in Binary Data Serialization is used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://alimy.me/post/dev_202012071321/&#34;&gt;Polymorphism in TL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advanced topics:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;tl-dependent.md&#34;&gt;Dependent types in TL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;tl-formal.md&#34;&gt;Formal description of TL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;tl-combinators.md&#34;&gt;Formal description of TL combinators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;post/dev_202012071330/&#34;&gt;Type serialization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;tl-tl.md&#34;&gt;TL schema for serialization of TL schemas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;tl-optargs.md&#34;&gt;Optional combinator parameters and their values&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;tl-abstract-types.md&#34;&gt;Binary serialization and abstract TL types&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;tl-patterns.md&#34;&gt;Formal description of templates in TL&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;overview&#34;&gt;Overview&lt;/h4&gt;
&lt;p&gt;A TL program usually consists of two sections separated by keyword &lt;code&gt;---functions---&lt;/code&gt;. The first section consists of declarations of built-in types and aggregate types (i.e. their constructors). The second section consists of the declared functions, i.e. functional combinators.&lt;/p&gt;
&lt;p&gt;Actually, both the first and second sections consist of combinator declarations, each of which ends with a semicolon. However, the first section contains only constructors, while the second section only involves functions. Each combinator is declared using a “combinator declaration” in the format explained above. However, the combinator number and field names may be explicitly assigned.&lt;/p&gt;
&lt;p&gt;If additional type declarations are required after functions have been declared, the keyword (section divider) &lt;code&gt;---types---&lt;/code&gt; is used. Furthermore, a functional combinator may be declared in the type section if its result type begins with an exclamation point (in fact, when the function section is interpreted, this exclamation point is added automatically).&lt;/p&gt;
&lt;p&gt;To explicitly define 32-bit names of combinators, a hash mark (&lt;code&gt;#&lt;/code&gt;) is added immediately after the combinator’s name, followed by 8 hexadecimal digits.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tg: MTProto v2</title>
      <link>https://alimy.me/post/dev_202011271711/</link>
      <pubDate>Fri, 27 Nov 2020 17:11:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202011271711/</guid>
      <description>&lt;h2 id=&#34;mobile-protocol-detailed-description&#34;&gt;Mobile Protocol: Detailed Description&lt;/h2&gt;
&lt;p&gt;This article describes the basic layer of the MTProto protocol version 2.0 (Cloud chats, server-client encryption). The principal differences from version 1.0 (&lt;a href=&#34;https://alimy.me/post/dev_202011271705/&#34; title=&#34;MTProto v1&#34;&gt;described here&lt;/a&gt; for reference) are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHA-256 is used instead of SHA-1;&lt;/li&gt;
&lt;li&gt;Padding bytes are involved in the computation of &lt;code&gt;msg_key&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msg_key&lt;/code&gt; depends not only on the message to be encrypted, but on a portion of &lt;code&gt;auth_key&lt;/code&gt; as well;
12..1024 padding bytes are used instead of 0..15 padding bytes in v.1.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;protocol-description&#34;&gt;Protocol description&lt;/h4&gt;
&lt;p&gt;Before a message (or a multipart message) is transmitted over a network using a transport protocol, it is encrypted in a certain way, and an external header is added at the top of the message that consists of a 64-bit key identifier &lt;code&gt;auth_key_id&lt;/code&gt; (that uniquely identifies an authorization key for the server as well as the user) and a 128-bit message key &lt;code&gt;msg_key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The authorization key &lt;code&gt;auth_key&lt;/code&gt; combined with the message key &lt;code&gt;msg_key&lt;/code&gt; define an actual 256-bit key &lt;code&gt;aes_key&lt;/code&gt; and a 256-bit initialization vector &lt;code&gt;aes_iv&lt;/code&gt;, which are used to encrypt the message using AES-256 encryption in infinite garble extension (IGE) mode. Note that the initial part of the message to be encrypted contains variable data (session, message ID, sequence number, server salt) that obviously influences the message key (and thus the AES key and iv). In &lt;strong&gt;MTProto 2.0&lt;/strong&gt;, the message key is defined as the 128 middle bits of the SHA-256 of the message body (including session, message ID, padding, etc.) prepended by 32 bytes taken from the authorization key. In the older &lt;strong&gt;MTProto 1.0&lt;/strong&gt;, the message key was computed as the lower 128 bits of SHA-1 of the message body, excluding the padding bytes.&lt;/p&gt;
&lt;p&gt;Multipart messages are encrypted as a single message.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tg: MTProto v1</title>
      <link>https://alimy.me/post/dev_202011271705/</link>
      <pubDate>Fri, 27 Nov 2020 17:05:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202011271705/</guid>
      <description>&lt;h2 id=&#34;mobile-protocol-detailed-description&#34;&gt;Mobile Protocol: Detailed Description&lt;/h2&gt;
&lt;p&gt;Prior to a message (or a multipart message) being transmitted over a network using a transport protocol, it is encrypted in a certain way, and an external header is added at the top of the message which is: a 64-bit key identifier (that uniquely identifies an authorization key for the server as well as the user) and a 128-bit message key.&lt;/p&gt;
&lt;p&gt;A user key together with the message key define an actual 256-bit key and a 256-bit initialization vector, which is what encrypts the message using AES-256 encryption with infinite garble extension (IGE). Note that the initial part of the message to be encrypted contains variable data (session, message ID, sequence number, server salt) that obviously influences the message key (and thus the AES key and iv). The message key is defined as the 128 lower-order bits of the SHA1 of the message body (including session, message ID, etc.) Multipart messages are encrypted as a single message.
&lt;img src=&#34;https://alimy.me/images/post/20201127170500.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
