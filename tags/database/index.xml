<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on 北野</title>
    <link>https://alimy.me/tags/database/</link>
    <description>Recent content in database on 北野</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <lastBuildDate>Sat, 05 Mar 2022 14:10:00 +0800</lastBuildDate><atom:link href="https://alimy.me/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL和PostgreSQL的常用语法差异</title>
      <link>https://alimy.me/post/dev_202203051410/</link>
      <pubDate>Sat, 05 Mar 2022 14:10:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202203051410/</guid>
      <description>&lt;p&gt;MySQL和PostgreSQL的常用语法差异，后续更新中&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac通过brew本地安装Postgresql</title>
      <link>https://alimy.me/post/dev_202202231110/</link>
      <pubDate>Wed, 23 Feb 2022 11:10:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202202231110/</guid>
      <description>&lt;pre&gt;&lt;code&gt;%&amp;gt; brew install postgres
%&amp;gt; psql -version
%&amp;gt; # 若之前安装过，请确保/usr/local/var路径下无任何postrges相关文件残留
%&amp;gt; initdb --locale=C -E UTF-8 /usr/local/var/postgres

%&amp;gt; ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents

%&amp;gt; # 检查server状态，并确认已开启
%&amp;gt; brew services list
%&amp;gt; brew services start postgresql

%&amp;gt; # mac上新建用户，设置密码并确认
%&amp;gt; createuser postgres -P

%&amp;gt; # 删掉默认的postgres库
%&amp;gt; dropdb postgres

%&amp;gt; # 新建postgres库，若客户端连接报错，有时候需要额外创建跟当前用户同名的库
%&amp;gt; createdb postgres --owner postgres --encoding UTF8 --echo

%&amp;gt; # 进入交互模式
%&amp;gt; psql -U username -d dbname -h 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go - SQL实践</title>
      <link>https://alimy.me/post/dev_202112031525/</link>
      <pubDate>Fri, 03 Dec 2021 15:25:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202112031525/</guid>
      <description>&lt;h3 id=&#34;标准库sql驱动接口-databasesqldriverhttpsgithubcomgolanggotreemastersrcdatabasesqldriver&#34;&gt;标准库SQL驱动接口 (&lt;a href=&#34;https://github.com/golang/go/tree/master/src/database/sql/driver&#34;&gt;database/sql/driver&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://alimy.me/images/post/20211203152500.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>乐观锁和悲观锁的区别</title>
      <link>https://alimy.me/post/dev_202303152242/</link>
      <pubDate>Mon, 15 Mar 2021 22:42:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_202303152242/</guid>
      <description>&lt;h3 id=&#34;乐观锁&#34;&gt;乐观锁&lt;/h3&gt;
&lt;p&gt;在关系数据库管理系统里，乐观并发控制（又名乐观锁，Optimistic Concurrency Control，缩写 OCC）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。乐观事务控制最早是由孔祥重（H.T.Kung）教授提出。&lt;/p&gt;
&lt;h3 id=&#34;乐观并发控制的阶段&#34;&gt;乐观并发控制的阶段&lt;/h3&gt;
&lt;p&gt;乐观并发控制的事务包括以下阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取：事务将数据读入缓存，这时系统会给事务分派一个时间戳。&lt;/li&gt;
&lt;li&gt;校验：事务执行完毕后，进行提交。这时同步校验所有事务，如果事务所读取的数据在读取之后又被其他事务修改，则产生冲突，事务被中断回滚。&lt;/li&gt;
&lt;li&gt;写入：通过校验阶段后，将更新的数据写入数据库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;乐观并发控制多数用于数据争用不大、冲突较少的环境中，这种环境中，偶尔回滚事务的成本会低于读取数据时锁定数据的成本，因此可以获得比其他并发控制方法更高的吞吐量。&lt;/p&gt;
&lt;p&gt;相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。&lt;/p&gt;
&lt;p&gt;数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。&lt;/p&gt;
&lt;p&gt;实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。 使用版本号实现乐观锁&lt;/p&gt;
&lt;p&gt;使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intro to BoltDB: Painless Performant Persistence</title>
      <link>https://alimy.me/post/dev_201603192255/</link>
      <pubDate>Sat, 19 Mar 2016 22:55:00 +0800</pubDate>
      
      <guid>https://alimy.me/post/dev_201603192255/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/boltdb/bolt&#34; title=&#34;BoltDB&#34;&gt;BoltDB&lt;/a&gt; is a pure Go persistence solution that saves data to a memory mapped file. I call it a persistence solution and not a database, because the word database has a lot of baggage associated with it that doesn’t apply to bolt. And that lack of baggage is what makes bolt so awesome.&lt;/p&gt;
&lt;p&gt;Bolt is just a Go package. There’s nothing you need to install on the system, no configuration to figure out before you can start coding, nothing. You just go get github.com/boltdb/bolt and then import “github.com/boltdb/bolt”.&lt;/p&gt;
&lt;p&gt;All you need to fully use bolt as storage is a file name. This is fantastic from both a developer’s point of view, and a user’s point of view. I don’t know about you, but I’ve spent months of work time over my career configuring and setting up databases and debugging configuration problems, users and permissions and all the other crap you get from more traditional databases like Postgres and Mongo. There’s none of that with bolt. No users, no setup, just a file name. This is also a boon for users of your application, because they don’t have to futz with all that crap either.&lt;/p&gt;
&lt;p&gt;Bolt is not a relational database. It’s not even a document store, though you can sort of use it that way. It’s really just a key/value store… but don’t worry if you don’t really know what that means or how you’d use that for storage. It’s super simple and it’s incredibly flexible. Let’s take a look.&lt;/p&gt;
&lt;p&gt;Storage in bolt is divided into buckets. A bucket is simply a named collection of key/value pairs, just like Go’s map. The name of the bucket, the keys, and the values are all of type []byte. Buckets can contain other buckets, also keyed by a []byte name.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
