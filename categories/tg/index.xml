<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tg on 北 野</title>
    <link>http://alimy.me/categories/tg/</link>
    <description>Recent content in Tg on 北 野</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;2018, Alimy; all rights reserved.</copyright>
    <lastBuildDate>Fri, 27 Nov 2020 17:11:00 +0800</lastBuildDate><atom:link href="http://alimy.me/categories/tg/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tg: MTProto v2</title>
      <link>http://alimy.me/post/dev_202011271711/</link>
      <pubDate>Fri, 27 Nov 2020 17:11:00 +0800</pubDate>
      
      <guid>http://alimy.me/post/dev_202011271711/</guid>
      <description>&lt;h2 id=&#34;mobile-protocol-detailed-description&#34;&gt;Mobile Protocol: Detailed Description&lt;/h2&gt;
&lt;p&gt;This article describes the basic layer of the MTProto protocol version 2.0 (Cloud chats, server-client encryption). The principal differences from version 1.0 (&lt;a href=&#34;mobile-protocol-v1.md&#34;&gt;described here&lt;/a&gt; for reference) are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHA-256 is used instead of SHA-1;&lt;/li&gt;
&lt;li&gt;Padding bytes are involved in the computation of &lt;code&gt;msg_key&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msg_key&lt;/code&gt; depends not only on the message to be encrypted, but on a portion of &lt;code&gt;auth_key&lt;/code&gt; as well;
12..1024 padding bytes are used instead of 0..15 padding bytes in v.1.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;protocol-description&#34;&gt;Protocol description&lt;/h4&gt;
&lt;p&gt;Before a message (or a multipart message) is transmitted over a network using a transport protocol, it is encrypted in a certain way, and an external header is added at the top of the message that consists of a 64-bit key identifier &lt;code&gt;auth_key_id&lt;/code&gt; (that uniquely identifies an authorization key for the server as well as the user) and a 128-bit message key &lt;code&gt;msg_key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The authorization key &lt;code&gt;auth_key&lt;/code&gt; combined with the message key &lt;code&gt;msg_key&lt;/code&gt; define an actual 256-bit key &lt;code&gt;aes_key&lt;/code&gt; and a 256-bit initialization vector &lt;code&gt;aes_iv&lt;/code&gt;, which are used to encrypt the message using AES-256 encryption in infinite garble extension (IGE) mode. Note that the initial part of the message to be encrypted contains variable data (session, message ID, sequence number, server salt) that obviously influences the message key (and thus the AES key and iv). In &lt;strong&gt;MTProto 2.0&lt;/strong&gt;, the message key is defined as the 128 middle bits of the SHA-256 of the message body (including session, message ID, padding, etc.) prepended by 32 bytes taken from the authorization key. In the older &lt;strong&gt;MTProto 1.0&lt;/strong&gt;, the message key was computed as the lower 128 bits of SHA-1 of the message body, excluding the padding bytes.&lt;/p&gt;
&lt;p&gt;Multipart messages are encrypted as a single message.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
